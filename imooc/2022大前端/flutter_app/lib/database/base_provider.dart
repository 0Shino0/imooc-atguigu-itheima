// ignore_for_file: unnecessary_null_comparison

import 'package:my_app/config.dart';
import 'package:my_app/entity/user/user_info.dart';
import 'package:my_app/storage.dart';
import 'package:my_app/utils/functions.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';
import 'package:sqflite/sqlite_api.dart';

class BaseProvider {
  // 1.ÂàùÂßãÂåñ
  // 2.Êèê‰æõdbÂÆû‰æã -> path -> openDatabase
  BaseProvider();

  static final BaseProvider db = BaseProvider();

  Database? _database;

  Future<Database> get database async => _database ?? await initDB();

  initDB() async {
    // Âà§Êñ≠Ë∑ØÂæÑÊòØÂê¶Â≠òÂú®Ôºå‰∏çÂ≠òÂú®ÈúÄË¶ÅÂàõÂª∫
    String path = '';
    UserInfo? userInfo = Storage().getUserInfo();
    String databasePath = await getDatabasesPath();
    // Ê†πÊçÆ‰∏çÂêåÁöÑÂú∫ÊôØÔºöpublic, user
    if (userInfo != null) {
      path = join(databasePath, userInfo.id, Config.privateDBName);
      await makeDir(path);
    } else {
      // ÂÖ¨ÂÖ±ÁöÑÂú∫ÊôØ
      path = join(databasePath, Config.publicDBName);
    }
    print('path is üëâ $path');
    Database database = await openDatabase(
      path,
      version: 1,
      onCreate: (db, version) async {
        // sqliteÂõõÁßçÁ±ªÂûã -> NULL, TEXT, INTEGER, BLOB, REAL
        // onCreate -> ÂàõÂª∫Êï∞ÊçÆË°®Ê†º
        await db.execute('''CREATE TABLE IF NOT EXISTS posts (
          _id TEXT PRIMARY KEY,
          uid TEXT,
          title TEXT,
          content TEXT,
          created TEXT,
          catalog TEXT,
          fav TEXT,
          isEnd TEXT DEFAULT '0',
          reads INTEGER DEFAULT 0,
          answer INTEGER DEFAULT 0,
          status TEXT DEFAULT '0',
          isTop TEXT DEFAULT '0',
          sort TEXT DEFAULT 100,
          tags TEXT)
          ''');
        // await db.execute ...
      },
    );
    _database = database;
    return database;
  }
}
